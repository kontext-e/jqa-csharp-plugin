<jqassistant-rules xmlns="http://schema.jqassistant.org/rule/v1.10"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://schema.jqassistant.org/rule/v1.10 https://schema.jqassistant.org/rule/jqassistant-rule-v1.10.xsd">

    <group id="C#:Dependencies">
        <includeConcept refId="C#:Dependencies:*"/>
    </group>

    <concept id="C#:Dependencies:Types">
        <description>Abstract Concept to enable extension by other Concepts</description>
        <cypher><![CDATA[RETURN 0]]></cypher>
    </concept>

    <concept id="C#:Dependencies:Methods">
        <description>Abstract Concept to enable extension by other Concepts</description>
        <cypher><![CDATA[RETURN 0]]></cypher>
    </concept>

    <concept id="C#:Dependencies:Types:Fields" severity="info">
        <providesConcept refId="C#:Dependencies:Types"/>
        <description>Marks Types that have Fields of other Types as dependent on it</description>
        <cypher><![CDATA[
            MATCH
                (s:Type:`C#`)-[:DECLARES]-(:Field:`C#`)-[f:OF_TYPE]-(t:Type:`C#`)
            WHERE
                t.fqn contains "." and not t.fqn starts with "System"
            AND
                s <> t
            WITH
                s, t, count(f) as coupling
            MERGE
                (s)-[d:DEPENDS_ON]->(t)
            ON CREATE SET
                d.coupling = coupling
            ON MATCH SET
                d.coupling = d.coupling + coupling
            RETURN s, t
        ]]></cypher>
    </concept>

    <concept id="C#:Dependencies:Types:Properties" severity="info">
        <providesConcept refId="C#:Dependencies:Types"/>
        <description>Marks Types that have Properties of other Types as dependent on it</description>
        <cypher><![CDATA[
            MATCH
                (s:Type:`C#`)-[:DECLARES]-(:Property:`C#`)-[f:OF_TYPE]-(t:Type:`C#`)
            WHERE
                t.fqn contains "." and not t.fqn starts with "System"
            AND
                s <> t
            WITH
                s, t, count(f) as coupling
            MERGE
                (s)-[d:DEPENDS_ON]->(t)
            ON CREATE SET
                d.coupling = coupling
            ON MATCH SET
                d.coupling = d.coupling + coupling
            RETURN
                s, t
        ]]></cypher>
    </concept>

    <concept id="C#:Dependencies:Types:Inheritance" severity="info">
        <providesConcept refId="C#:Dependencies:Types"/>
        <description>Marks Types that Inherit from another Type as dependent on it</description>
        <cypher><![CDATA[
            MATCH
                (s:Type:`C#`)-[c:EXTENDS|IMPLEMENTS]->(t:Type:`C#`)
            WHERE
                t.fqn contains "." and not t.fqn starts with "System"
            AND
                s <> t
            WITH s, t, count(c) as coupling
            MERGE
                (s)-[d:DEPENDS_ON]-(t)
            ON CREATE SET
                d.coupling = coupling
            ON MATCH SET
                d.coupling = d.coupling + coupling
            RETURN
                s.fqn, t.fqn
        ]]></cypher>
    </concept>

    <concept id="C#:Dependencies:Methods:Returns" severity="info">
        <providesConcept refId="C#:Dependencies:Methods"/>
        <description>Marks Types as dependent on each other when a type contains a method that returns another type</description>
        <cypher><![CDATA[
            MATCH
                (s:Type:`C#`)-[:DECLARES]->(m:Method:`C#`)-[c:RETURNS]->(t:Type:`C#`)
            WHERE
                t<>s
            AND
                t.fqn contains '.'
            WITH s, t, count(c) as coupling
            MERGE
                (s)-[d:DEPENDS_ON]->(t)
            ON CREATE SET
                d.coupling = coupling
            ON MATCH SET
                d.coupling = d.coupling + coupling
            RETURN
                s.fqn, t.fqn
        ]]></cypher>
    </concept>

    <concept id="C#:Dependencies:Methods:Parameters" severity="info">
        <providesConcept refId="C#:Dependencies:Methods"/>
        <description>Marks Types as dependent on each other when a type contains a method that has a parameter of another type</description>
        <cypher><![CDATA[
            MATCH
                (s:Type:`C#`)-[:DECLARES]->(m:Method:`C#`)-[:HAS]->(p:Parameter:`C#`)-[c:OF_TYPE]->(t:Type:`C#`)
            WHERE
                t<>s
            AND
                t.fqn contains '.'
            WITH s, t, count(c) as coupling
            MERGE
                (s)-[d:DEPENDS_ON]->(t)
            ON CREATE SET
                d.coupling = coupling
            ON MATCH SET
                d.coupling = d.coupling + coupling
            RETURN
                s.fqn, t.fqn
        ]]></cypher>
    </concept>

    <concept id="C#:Dependencies:Methods:TypeParameters" severity="info">
        <providesConcept refId="C#:Dependencies:Methods"/>
        <description>Marks Types as dependent on each other when a type contains a method calls a method with type parameters of another type</description>
        <cypher><![CDATA[
            MATCH
                (s:Type:`C#`)-[:DECLARES]->(m:Method:`C#`)-[:INVOKES]->(:Invocation:`C#`)-[c:WITH_TYPE_PARAMETER]->(t:Type:`C#`)
            WHERE
                s<>t
            AND
                t.fqn contains '.'
            WITH s, t, count(c) as coupling
            MERGE
                (s)-[d:DEPENDS_ON]->(t)
            ON CREATE SET
                d.coupling = coupling
            ON MATCH SET
                d.coupling = d.coupling + coupling
            RETURN
                s.fqn, t.fqn
        ]]></cypher>
    </concept>


    <concept id="C#:Dependencies:Types:StaticCalls" severity="info">
        <providesConcept refId="C#:Dependencies:Types"/>
        <description>Marks Types as dependent on one another if type a contains a method that calls a static method of another type</description>
        <cypher><![CDATA[
                        MATCH
                (s:Type:`C#`)-[:DECLARES]->(m:Method:`C#`)-[i:INVOKES]->(:Invocation)-[:INVOKES]->(n:Method:`C#`)<-[:DECLARES]-(t:Type:`C#`)
            WHERE
                n.static
            AND
                s <> t
            AND
                t.fqn contains "." and not t.fqn starts with "System"
            WITH
                s, t, count(i) as coupling, m, n
            MERGE
                (s)-[d:DEPENDS_ON]-(t)
            ON CREATE SET
                d.coupling = coupling
            ON MATCH SET
                d.coupling = d.coupling + coupling
            RETURN
                m.fqn, n.fqn
        ]]></cypher>
    </concept>

    <concept id="C#:Dependencies:Namespaces" severity="info">
        <requiresConcept refId="C#:Dependencies:Types"/>
        <requiresConcept refId="C#:Dependencies:Methods"/>
        <description>Marks Namespaces dependent on each other based on dependencies of Types</description>
        <cypher><![CDATA[
            MATCH
                (sourceNamespace:Namespace:`C#`)-[:CONTAINS]->(sourceType:Type:`C#`)-[d:DEPENDS_ON]->(targetType:Type:`C#`)<-[:CONTAINS]-(targetNamespace:Namespace:`C#`)
            WHERE
                sourceNamespace <> targetNamespace
            WITH
                sourceNamespace, targetNamespace, sum(d.coupling) as coupling
            MERGE
                (sourceNamespace)-[d:DEPENDS_ON]-(targetNamespace)
            ON CREATE SET
                d.coupling = coupling
            ON MATCH SET
                d.coupling = d.coupling + coupling
            RETURN
                sourceNamespace.fqn, targetNamespace.fqn, coupling
        ]]></cypher>
    </concept>

    <concept id="C#:Dependencies:Projects" severity="info">
        <requiresConcept refId="C#:Dependencies:Types"/>
        <requiresConcept refId="C#:Dependencies:Methods"/>
        <description>Marks Projects Dependent on each other based on dependencies of Types within Projects</description>
        <cypher><![CDATA[
            MATCH
                (p:Project:`C#`)-[:CONTAINS]->(f:File:`C#`)-[:CONTAINS]->(t:Type:`C#`)-[r:DEPENDS_ON]->(d:Type:`C#`)<-[:CONTAINS]-(w:File:`C#`)<-[:CONTAINS]-(b:Project:`C#`)
            WHERE
                p<>b
            WITH
                p, b, sum(r.coupling) as coupling
            MERGE
                r=(p)-[d:DEPENDS_ON]-(b)
            ON CREATE SET
                d.coupling = coupling
            ON MATCH SET
                d.coupling = d.coupling + coupling
            RETURN DISTINCT
                r
        ]]></cypher>
    </concept>

    <concept id="C#:Dependencies:TransitivePackageDependenciesFromChildToOther" severity="info">
        <requiresConcept refId="C#:Dependencies:Namespaces"/>
        <requiresConcept refId="C#:Namespaces:Levels"/>
        <description>Add a DEPENDS_ON relationship to parents of namespace P *to* other namespace that depend on P</description>
        <cypher><![CDATA[
            MATCH
                (parent:Namespace:`C#`)-[:CONTAINS*]->(child:Namespace:`C#`)-[r:DEPENDS_ON]->(other:Namespace:`C#`)
            WHERE
                parent.level <= other.level
			AND
            	parent <> other
            AND
            	r.resolved IS NULL
            MERGE
                (parent)-[d:DEPENDS_ON]->(other)
            ON CREATE SET
                d.coupling = r.coupling,
                d.resolved=true
            ON MATCH SET
                d.coupling = d.coupling + r.coupling,
                d.resolved=true
            RETURN
                distinct parent.fqn, other.fqn
        ]]></cypher>
    </concept>


    <concept id="C#:Dependencies:TransitivePackageDependenciesFromOtherToChild" severity="info">
        <requiresConcept refId="C#:Dependencies:Namespaces"/>
        <requiresConcept refId="C#:Namespaces:Levels"/>
        <description>Add a DEPENDS_ON relationship to parents of a package P *from* other namespace that depend on P</description>
        <cypher><![CDATA[
            MATCH
                (other:Namespace:`C#`)-[r:DEPENDS_ON]->(child:Namespace:`C#`)<-[:CONTAINS*]-(parent:Namespace:`C#`)
            WHERE
                other.level >= parent.level
			AND
            	parent <> other
            AND
            	r.resolved IS NULL
            MERGE
                (other)-[d:DEPENDS_ON]->(parent)
            ON CREATE SET
                d.coupling = r.coupling,
                d.resolved=true
            ON MATCH SET
                d.coupling = d.coupling + r.coupling,
                d.resolved=true
            RETURN
                distinct other.fqn, parent.fqn
        ]]></cypher>
    </concept>

    <concept id="C#:Dependencies:Namespaces:HighestFanOut">
        <requiresConcept refId="C#:Dependencies:Namespaces"/>
        <description>Lists the namespace that depend on the most other namespaces</description>
        <cypher><![CDATA[
            MATCH
                (n:Namespace:`C#`)-[d:DEPENDS_ON]->(m:Namespace:`C#`)
            RETURN
                n.fqn, count(d)
            ORDER BY
                count(d)
            DESC
        ]]></cypher>
    </concept>

    <concept id="C#:Dependencies:Namespaces:HighestFanIn">
        <requiresConcept refId="C#:Dependencies:Namespaces"/>
        <description>Lists the namespaces that are dependent on the most</description>
        <cypher><![CDATA[
            MATCH
                (n:Namespace:`C#`)<-[d:DEPENDS_ON]-(m:Namespace:`C#`)
            RETURN
                n.fqn, count(d)
            ORDER BY
                count(d)
            DESC
        ]]></cypher>
    </concept>

</jqassistant-rules>